# Gitea Service Template

version: "3"

services:
  app:
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.gitea.entrypoints: "web, websecure"
        traefik.http.routers.gitea.rule: "Host(`gitea.tlake.io`)"
        traefik.http.routers.gitea.tls: "true"
        traefik.http.routers.gitea.tls.certresolver: "production"
        traefik.http.services.gitea.loadbalancer.server.port: 3000
      mode: "replicated"
      replicas: 1
      restart_policy:
        condition: "any"
      placement:
        constraints:
          - "node.hostname == bolt"
          #- "node.platform.arch == ARCH"
    environment:
      - "USER_UID=1000"
      - "USER_GID=1000"
      - "GITEA__database__DB_TYPE=$DB_TYPE"
      - "GITEA__database__HOST=db:$DB_PORT"
      - "GITEA__database__NAME=$DB_NAME"
      - "GITEA__database__USER=$DB_USER"
      - "GITEA__database__PASSWD=$DB_PASSWORD"
    image: "gitea/gitea:1.19.4"
    networks:
      - "gitea"
      - "home"
    ports:
      - "3000:3000"
      - "222:22"
    volumes:
      - "app_data:/data"
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"

  db:
    deploy:
      mode: "replicated"
      replicas: 1
      restart_policy:
        condition: "any"
      placement:
        constraints:
          - "node.hostname == bolt"
    environment:
      - "POSTGRES_USER=$DB_USER"
      - "POSTGRES_PASSWORD=$DB_PASSWORD"
      - "POSTGRES_DB=$DB_NAME"

    image: "postgres:14"
    networks:
      - "gitea"
    volumes:
      - "postgres_data:/var/lib/postgresql/data"

networks:
  # Create a network specifically for Gitea and its database
  gitea:
    external: false
  # This assumes that the "home" network is an already-existing
  # user-defined overlay network that Traefik routes across.
  home:
    external:
      name: "home"

volumes:
  app_data:
  postgres_data:
