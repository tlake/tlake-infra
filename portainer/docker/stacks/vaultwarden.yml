# Vaultwarden Service Template

version: "3"

services:
  # Given stack name "vaultwarden", should create a service "vaultwarden_app"
  app:
    deploy:
      labels:
        traefik.enable: "true"
        traefik.http.routers.vaultwarden.entrypoints: "web, websecure"
        traefik.http.routers.vaultwarden.rule: "Host(`bitwarden.tlake.io`)"
        traefik.http.routers.vaultwarden.tls: "true"
        traefik.http.routers.vaultwarden.tls.certresolver: "production"
        traefik.http.services.vaultwarden.loadbalancer.server.port: 80
      mode: "replicated"
      replicas: 0
      restart_policy:
        condition: "any"
      placement:
        constraints:
          - "node.platform.arch == aarch64"
    environment:
      ADMIN_TOKEN: $ADMIN_TOKEN
      DEBIAN_FRONTEND: "noninteractive"
      LC_ALL: "C.UTF-8"
      PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      ROCKET_ENV: "staging"
      ROCKET_PORT: 80
      ROCKET_WORKERS: 10
      SIGNUPS_ALLOWED: "true"
      UDEV: "off"
      WEBSOCKET_ENABLED: "true"
    image: "vaultwarden/server:latest"
    networks:
      - "home"
    ports:
      - "8888:80"
    volumes:
      - "app_data:/data"

networks:
  # This assumes that the "home" network is an already-existing
  # user-defined overlay network that Traefik routes across.
  home:
    external:
      name: "home"

volumes:
  # Given stack name "vaultwarden", should create a volume "vaultwarden_app_data"
  app_data:
